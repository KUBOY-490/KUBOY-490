<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Qt利用Git版本控制</title>
      <link href="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建gitee账号"><a href="#一、创建gitee账号" class="headerlink" title="一、创建gitee账号"></a>一、创建gitee账号</h2><h2 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h2><ol><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users/49059/Pictures/MD截图/1.png"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users/49059/Pictures/MD截图/2.png"></li><li>仓库刚创建完成后，会有http和ssh地址，建议复制到记事本上</li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/3.png"></li><li>这个页面暂时<strong>不要关闭</strong>  ，<strong>不要有任何操作</strong>   可以先最小化窗口</li></ol><h2 id="三、创建Qt项目"><a href="#三、创建Qt项目" class="headerlink" title="三、创建Qt项目"></a>三、创建Qt项目</h2><ol><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/4.png"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/5.png"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/6.png"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/7.png"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/8.png"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/9.png"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/10.png"></li><li>点Apply，之后点击OK，下一步。项目创建成功，可以先构建、运行</li></ol><h2 id="四、Qt中写代码并上传到Gitee仓库"><a href="#四、Qt中写代码并上传到Gitee仓库" class="headerlink" title="四、Qt中写代码并上传到Gitee仓库"></a>四、Qt中写代码并上传到Gitee仓库</h2><ol><li><p>在本地创建仓库</p></li><li><pre class=" language-git"><code class="language-git">git config --global user.name <span class="token string">"Gitee账号"</span>git config --global user.email <span class="token string">"Gitee绑定的邮箱"</span>mkdir qt-projectcd qt-projectgit inittouch README.mdgit add README.mdgit commit -m <span class="token string">"first commit"</span>git remote add origin git@gitee.com:Gitee仓库地址git push -u origin master</code></pre><p> <img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/12.png" alt="Git bash"></p></li><li><p> 整合代码</p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/11.png" alt="整合代码"></p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/14.png"></p></li><li><p>上传代码到Gitee</p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/141.png"></p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/142.png"></p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/143.png"></p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Users\49059\Pictures\MD截图/15.png"></p></li><li><p>看到上图，说明上传成功了，可以到Gitee查看刚才创建的仓库(<strong>需要刷新</strong>)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker中部署MYSQL</title>
      <link href="/2021/10/10/docker%E4%B8%AD%E9%83%A8%E7%BD%B2MYSQL/"/>
      <url>/2021/10/10/docker%E4%B8%AD%E9%83%A8%E7%BD%B2MYSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><pre><code>docker pull mysql</code></pre><h2 id="二、启动"><a href="#二、启动" class="headerlink" title="二、启动"></a>二、启动</h2><pre><code>docker run -p 3306:3306 --name 21mysql -v /project/mysql/conf:/etc/mysql/conf.d -v /project/mysql/logs:/logs -v /project/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1234567 -d mysql// -e 初始化密码// -v 数据卷</code></pre><ul><li>-p  3306:3306   因为MYSQL的默认端口是3306</li></ul><h2 id="三、进入mysql"><a href="#三、进入mysql" class="headerlink" title="三、进入mysql"></a>三、进入mysql</h2><pre><code>docker exec -it 21mysql /bin/bashmysql -uroot -p1234567输入密码</code></pre><h2 id="四、设置数据库远程连接"><a href="#四、设置数据库远程连接" class="headerlink" title="四、设置数据库远程连接"></a>四、设置数据库远程连接</h2><ol><li>新建用户</li></ol><pre class=" language-mysql"><code class="language-mysql"> #创建新的远程用户及密码 CREATE USER 'jim'@'%' IDENTIFIED BY '123456'; #设置远程登录  ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '1234567'; </code></pre><p>​    </p><ol start="2"><li><p>设置权限</p><ol><li><h4 id="所有数据库的所有权限"><a href="#所有数据库的所有权限" class="headerlink" title="所有数据库的所有权限"></a>所有数据库的所有权限</h4><pre class=" language-mysql"><code class="language-mysql">grant all privileges on *.* to 'jim'@'%';#刷新FLUSH PRIVILEGES;</code></pre></li></ol></li><li><p>设置 testDB 数据库的所有权限</p><pre class=" language-mysql"><code class="language-mysql">//@localhost 是本地连接grant all privileges on testDB.* to 'jim'@localhost identified by '1234';//@'%' 远程grant all privileges on mogudb.* to 'jim'@'%';flush privileges;//刷新系统权限表</code></pre></li><li><p>设置 testDB 数据库的部分权限</p><p> ****   赋予了 <strong>查询和更新</strong> 的权限</p><pre class=" language-mysql"><code class="language-mysql">grant select,update on testDB.* to test@localhost identified by '1234';flush privileges; //刷新系统权限表</code></pre></li><li><p>修改密码</p><pre class=" language-mysql"><code class="language-mysql">update mysql.user set password=password('新密码') where User="test" and Host="localhost";flush privileges;</code></pre></li><li><p>删除用户及权限</p><pre class=" language-mysql"><code class="language-mysql">#删除远程用户drop user 用户名@'%';#例如:drop 'jim'@'%';#删除本地用户drop user 用户名@localhost; </code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker中部署Tomcat</title>
      <link href="/2021/10/10/docker%E4%B8%AD%E9%83%A8%E7%BD%B2Tomcat/"/>
      <url>/2021/10/10/docker%E4%B8%AD%E9%83%A8%E7%BD%B2Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="tomcat相关操作"><a href="#tomcat相关操作" class="headerlink" title="tomcat相关操作"></a>tomcat相关操作</h1><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><pre><code>docker pull tomcat//指定版本号：docker pull tomcat:9.0</code></pre><h2 id="二、启动Tomcat"><a href="#二、启动Tomcat" class="headerlink" title="二、启动Tomcat"></a>二、启动Tomcat</h2><h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><pre><code>docekr run -p 8080:8080  -it --name xxxtomcat tomcat </code></pre><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3><pre><code>docker run -p 8080:8080 -it tomcat /bin/bashcd /bin./startup.sh</code></pre><h3 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h3><pre><code>docker create --name xxxtomcat -p 80:8080 -v /project/demo1://usr/local/tomcat/webapps tomcat</code></pre><ul><li>-p 80:8080  80是外部访问的端口，8080是Tomcat监事的端口，80:8080 把Tomcat的8080端口映射到服务器的80端口</li><li>-v 是添加数据卷, <strong>:</strong> 前面的的是服务器的/本地的路径(目录/文件夹)</li><li><strong>–name</strong> 后面的是自定义的名字方便区别</li></ul><h2 id="三、进入Tomcat里"><a href="#三、进入Tomcat里" class="headerlink" title="三、进入Tomcat里"></a>三、进入Tomcat里</h2><pre><code>docker exec -it xxxtomcat /bin/bash//把/project/demo1里的文件 复制到 容器里docker cp /project/demo1 xxxtomcat://usr/local/tomcat/webapps</code></pre><h2 id="默认访问的文件"><a href="#默认访问的文件" class="headerlink" title="默认访问的文件"></a>默认访问的文件</h2><p><strong>Tomcat默认打开/usr/local/tomcat/webapps/ROOT/index.html</strong></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装docker</title>
      <link href="/2021/10/10/linux%E5%AE%89%E8%A3%85docker/"/>
      <url>/2021/10/10/linux%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装DOCKER"><a href="#安装DOCKER" class="headerlink" title="安装DOCKER"></a>安装DOCKER</h1><ol><li>先安装一些系统工具</li><li>添加软件源信息：</li><li>更新并且安装Docker-ce</li><li>启动Docker</li></ol><pre><code>yum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum -y install docker-ceservice docker start</code></pre><pre><code>镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https://7n7zsvyk.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h1 id="启动docker后台"><a href="#启动docker后台" class="headerlink" title="启动docker后台"></a>启动docker后台</h1><ol><li>docker run  hello-world</li><li>docker images<ol><li>REPOSITORY</li><li>TAG   版本号</li><li>IMAGE ID   镜像ID（同一个镜像的<strong>ID相同</strong>且<strong>唯一的</strong>）</li><li>CREATED    镜像创建时间</li><li>SIZE     镜像大小</li></ol></li></ol><h2 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1.获取镜像"></a>1.获取镜像</h2><ol><li><pre><code> docker pull centos</code></pre><ol><li>这样会下载最新的CentOS版本</li></ol></li><li><pre><code> docker pull cenos:7</code></pre><ol><li>指定下载的版本号</li></ol></li></ol><h2 id="2-查看本地镜像"><a href="#2-查看本地镜像" class="headerlink" title="2.查看本地镜像"></a>2.查看本地镜像</h2><ol><li><p>查看所有的本地镜像</p><ol><li><pre><code> docker images docker images -a</code></pre></li><li><p><strong>-a    含中间映像层</strong></p></li><li><p>只查看镜像的ID</p><ol><li><pre><code> docker images -aq</code></pre></li></ol></li></ol></li><li><p>查看单个镜像的信息</p><ol><li><pre><code> docker images tomcat docker images centos</code></pre></li></ol></li><li><p>查看完整的信息</p><ol><li><pre><code> docker images --digests</code></pre></li><li><pre><code> docker images --digests --no-trunc</code></pre></li><li><p>–no-trunc   显示完整的ID信息</p></li></ol></li></ol><h2 id="3-搜索某个镜像"><a href="#3-搜索某个镜像" class="headerlink" title="3.搜索某个镜像"></a>3.搜索某个镜像</h2><ol><li><pre><code> docker search centos docker search -s 10 centos docker search --automated centos</code></pre></li></ol><h2 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h2><ol><li><ol><li><pre><code> docker rmi -f (IMAGE ID) docker rmi -f 镜像名1 镜像名2 ... /* 删除多个镜像 */</code></pre></li><li><pre><code> docker rmi -f $(docker images -aq)</code></pre></li></ol></li><li><p>强制删除镜像，而不进行提示确认 <strong>( -f,force )</strong></p><ol><li><pre><code> docker images prune -f</code></pre></li><li><p><strong>docker images prune</strong></p><ol><li><strong>-a .-all:</strong>    删除所有无用镜像，不光是临时镜像</li><li><strong>-filter,  filter:</strong>      只清理符合给定过滤器的镜像</li><li><strong>-f,dorce:</strong>      强制删除镜像，而不进行提示确认</li></ol></li></ol></li></ol><h2 id="5-创建镜像"><a href="#5-创建镜像" class="headerlink" title="5.创建镜像"></a>5.创建镜像</h2><p>略</p><h1 id="操作docker容器"><a href="#操作docker容器" class="headerlink" title="操作docker容器"></a>操作docker容器</h1><p>镜像是静态的只读文件，而容器带有运行时需要的可写文件层，同时，容器中的<strong>应用进程</strong>处于<strong>运行状态</strong></p><ol><li><p>进入Ubuntu镜像：</p><ol><li><pre><code> docker run -it ubuntu /bin/sh</code></pre></li><li><p>退出ubuntu：</p></li><li><pre><code> exit</code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/10/hello-world/"/>
      <url>/2021/10/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
