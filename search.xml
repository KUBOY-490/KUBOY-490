<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>轻量级SQL安装及使用</title>
      <link href="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="轻量级SQL安装及使用"><a href="#轻量级SQL安装及使用" class="headerlink" title="轻量级SQL安装及使用"></a>轻量级SQL安装及使用</h1><h2 id="一、下载轻量级SQL"><a href="#一、下载轻量级SQL" class="headerlink" title="一、下载轻量级SQL"></a>一、下载轻量级SQL</h2><ol><li><p>下载</p><ol><li><a href="https://pan.baidu.com/s/1ykoN03ERMc023vgZp3L_qA">百度网盘链接</a></li><li>提取码：grrd </li><li>或者微信扫一扫：<img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/1.png" alt="下载"></li></ol></li><li><p>下载完成后解压、安装</p><ol><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/2.png"></p></li><li><p>双击安装文件</p></li><li><p>可以一直点<strong>下一步</strong></p></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/3.png"></p></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/4.png"></p></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/5.png"></p></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/6.png"></p></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/7.png"></p></li><li><p>点击完成后，自动运行，如果没有启动服务，点击  <strong>启动服务</strong></p></li><li><p>点击  <strong>查询分析器</strong></p></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/8.png"></p></li><li><p>弹出新的窗口  ，注：此时已经是与SQL连接状态</p></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/9.png"></p></li><li><h2 id="这个时候可以用SQL语句操作数据库了！"><a href="#这个时候可以用SQL语句操作数据库了！" class="headerlink" title="这个时候可以用SQL语句操作数据库了！"></a>这个时候可以用SQL语句操作数据库了！</h2></li><li><h2 id="调整字体大小、背景颜色等："><a href="#调整字体大小、背景颜色等：" class="headerlink" title="调整字体大小、背景颜色等："></a>调整字体大小、背景颜色等：</h2></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/10.png"></p></li><li><p>或者按快捷键： CTRL+SHIFT+O</p></li><li><p><img src="/2021/10/12/%E8%BD%BB%E9%87%8F%E7%BA%A7SQL%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/11.png"></p></li><li><p>设置完，记得点<strong>应用</strong></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/12/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/12/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><p><a href="https://lneverl.gitee.io/posts/5a40952.html,%22B%E7%AB%99%E5%8D%9A%E4%B8%BB%22">搭建hexo博客</a></p><p><a href="https://lneverl.gitee.io/posts/2092ec56.html">博客部署到阿里云</a></p><h2 id="一、本地安装Git"><a href="#一、本地安装Git" class="headerlink" title="一、本地安装Git"></a>一、本地安装Git</h2><p><a href="https://blog.csdn.net/huangqqdy/article/details/83032408">教程</a></p><h2 id="二、本地安装nodejs"><a href="#二、本地安装nodejs" class="headerlink" title="二、本地安装nodejs"></a>二、本地安装nodejs</h2><ol><li>打开nodejs官网<a href="https://nodejs.org/">nodejs官网</a>。</li><li>下载安装一路下一步即可。</li><li>检查是否安装<ol><li>win+R输入cmd，打开命令行</li><li>输入node -v 返回版本号即安装成功</li><li>输入npm -v 返回版本号即安装成功</li></ol></li></ol><h2 id="三、本地安装hexo"><a href="#三、本地安装hexo" class="headerlink" title="三、本地安装hexo"></a>三、本地安装hexo</h2><ol><li><p>hexo的安装</p><ol><li><p>按win+r弹出的框输入cmd回车弹出命令提示符。输入以下指令回车。</p></li><li><pre><code> npm install -g cnpm --registry=https://registry.npm.taobao.org  cnpm install hexo-cli -g</code></pre></li><li><p>创建一个新的文件夹</p><ol><li><pre><code> D:  mkdie blog  cd blog</code></pre></li></ol></li><li><p>初始化</p><ol><li><pre><code> hexo inti</code></pre></li><li><pre><code> 出现提示:  INFO  Start blogging with Hexo! </code></pre></li><li><p>说明初始化成功</p></li></ol></li></ol></li><li><p>hexo的部署</p><ol><li><p>在 blog  目录下，打开cmd</p></li><li><pre><code> hexo s</code></pre></li><li><p>出现提示：</p><ol><li><pre><code> INFO  Start processing INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></pre></li><li><p>说明博客正在 <strong>本地4000端口</strong> 运行</p></li></ol></li><li><p>打开_config.yml这个文件</p><ol><li><p>找到最下面</p></li><li><pre><code> # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy:   type: &#39;&#39;</code></pre></li><li><p>改成：</p></li><li><pre><code> deploy:   type: git   repo: git@服务器IP地址:/home/git/blog.git</code></pre></li><li><p>repo的地址在下面介绍 （服务器中部署Git）</p></li></ol></li><li><p>然后用命令提示符，还是在blog路径下。输入以下指令安装插件。</p><ol><li><pre><code> npm install hexo-deployer-git --save </code></pre></li><li><pre><code> hexo clean hexo g hexo d  //2和3命令可以合成一行： hexo g -d</code></pre></li></ol></li></ol></li></ol><h2 id="四、在服务器中部署环境"><a href="#四、在服务器中部署环境" class="headerlink" title="四、在服务器中部署环境"></a>四、在服务器中部署环境</h2><ol><li><p>安装nginx</p><ol><li><p>安装gcc gcc-c++</p></li><li><pre><code> yum install -y gcc gcc-c++ </code></pre></li><li><p>安装PCRE库</p></li><li><pre><code>  cd /usr/local/  wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz  tar -xvf pcre-8.37.tar.gz  cd pcre-8.37  ./configure  make &amp;&amp; make install  pcre-config --version </code></pre></li><li><p> 安装 openssl 、zlib 、 gcc 依赖</p></li><li><pre><code> yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel  </code></pre></li><li><p>安装nginx</p><ol><li><strong>安装nginx一定要在local文件夹下</strong></li></ol></li><li><pre><code> cd /usr/local/  wget http://nginx.org/download/nginx-1.17.9.tar.gz  tar -xvf nginx-1.17.9.tar.gz  cd nginx-1.17.9  ./configure  make &amp;&amp; make install </code></pre></li></ol></li><li><p>安装Git以及Node.js</p><ol><li><p>安装Node.js</p><ol><li><pre><code> curl -sL https://rpm.nodesource.com/setup_10.x | bash -  yum install -y nodejs </code></pre></li><li><p>查看是否成功</p></li><li><pre><code> node -v  npm -v </code></pre></li></ol></li><li><p>安装Git及配置仓库</p><ol><li><p>安装git及新建git用户</p></li><li><pre><code> yum install git  adduser git  chmod 740 /etc/sudoers  vi /etc/sudoers</code></pre></li><li><p>在   root ALL=(ALL)     ALL        下一行添加<br> git ALL=(ALL) ALL</p></li><li><p>执行以下指令更改文件夹权限</p></li><li><pre><code> chmod 400 /etc/sudoers  sudo passwd git  </code></pre></li><li><p><strong>切换git用户并且建立密钥</strong></p></li><li><pre><code> su git  cd ~  mkdir .ssh  cd .ssh  vi authorized_keys  chmod 600 ~/.ssh/authorized_keys  chmod 700 ~/.ssh  </code></pre></li><li><p>创建git仓库</p></li><li><pre><code> cd ~  git init --bare blog.git  vi ~/blog.git/hooks/post-receive  </code></pre></li><li><p>输入</p></li><li><pre><code>git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f</code></pre><ol><li>–work-tree=/home/www/website       这条语句是从本地 <strong>hexo d</strong>  时静态页面部署的路径</li></ol></li><li><p>保存退出</p></li><li><pre><code>chmod +x ~/blog.git/hooks/post-receive</code></pre></li><li><p>以上指令都需要在su git 之后执行 如果中途断开重新连接过，需要重新执行 su git指令 进入git账户。</p></li><li><p>新建/home/www/website文件夹</p></li><li><p>在root用户下执行，所限先exit切换为root账户</p></li><li><pre><code>exitcd /homemkdir wwwcd wwwmkdir website修改文件夹权限 这步很重要 视频中没有提及chmod 777 /home/www/websitechmod 777 /home/www</code></pre></li><li><p>在本地电脑输入</p></li><li><pre><code>ssh -v git@服务器的公网ip</code></pre></li><li><p>如果提示输入Git的密码，请配置远程Git和本地的SSH连接</p></li><li><p>如果直接连接到远程服务器，说明服务器Git配置成功</p></li><li><p>修改本地配置文件</p></li><li><p>在上面的:   三、2.4的步骤</p></li><li><p>回到服务器上：</p></li><li><p>写入启动脚本</p></li><li><ol><li><pre><code> #!/bin/bash #Startup script for the nginx Web Server #chkconfig: 2345 85 15 nginx=/usr/local/nginx/sbin/nginx conf=/usr/local/nginx/conf/nginx.conf case $1 in  start) echo -n &quot;Starting Nginx&quot; $nginx -c $conf echo &quot; done.&quot; ;; stop) echo -n &quot;Stopping Nginx&quot; killall -9 nginx echo &quot; done.&quot; ;; test) $nginx -t -c $conf echo &quot;Success.&quot; ;; reload) echo -n &quot;Reloading Nginx&quot; ps auxww | grep nginx | grep master | awk &#39;&#123;print $2&#125;&#39; | xargs kill -HUP echo &quot; done.&quot; ;; restart) $nginx -s reload echo &quot;reload done.&quot; ;; *) echo &quot;Usage: $0 &#123;start|restart|reload|stop|test|show&#125;&quot; ;; esac</code></pre></li></ol></li><li><p>然后执行</p></li><li><pre><code>chmod +x nginx</code></pre></li><li><p>控制指令</p></li><li><pre><code>启动service nginx start停止service nginx stop重启service nginx reload</code></pre></li></ol></li></ol></li><li><p>如果是用docker中的Tomcat部署静态网页：</p><ol><li><pre><code> docker create --name 1010tomcat -p 80:8080 -v /home/www/website://usr/local/tomcat/webapps/ROOT tomcat </code></pre></li><li></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt利用Git版本控制</title>
      <link href="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建gitee账号"><a href="#一、创建gitee账号" class="headerlink" title="一、创建gitee账号"></a>一、创建gitee账号</h2><h2 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h2><ol><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/1.png" alt="创建仓库"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/2.png"></li><li>仓库刚创建完成后，会有http和ssh地址，建议复制到记事本上</li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/3.png" alt="给仓库起名字"></li><li>这个页面暂时<strong>不要关闭</strong>  ，<strong>不要有任何操作</strong>   可以先最小化窗口</li></ol><h2 id="三、创建Qt项目"><a href="#三、创建Qt项目" class="headerlink" title="三、创建Qt项目"></a>三、创建Qt项目</h2><ol><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/4.png" alt="新建项目"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/5.png" alt="点击choose"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/6.png" alt="下一步"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/7.png" alt="下一步"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/8.png" alt="下一步"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/9.png" alt="版本控制系统：Git"></li><li><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/10.png" alt="填Git安装的路径（目录）"></li><li>点Apply，之后点击OK，下一步。项目创建成功，可以先构建、运行</li></ol><h2 id="四、Qt中写代码并上传到Gitee仓库"><a href="#四、Qt中写代码并上传到Gitee仓库" class="headerlink" title="四、Qt中写代码并上传到Gitee仓库"></a>四、Qt中写代码并上传到Gitee仓库</h2><ol><li>在本地创建仓库</li></ol><ol start="2"><li><pre class=" language-git"><code class="language-git"> git config --global user.name <span class="token string">"Gitee账号"</span>  git config --global user.email <span class="token string">"Gitee绑定的邮箱"</span>  mkdir qt-project  cd qt-project  git init  touch README.md  git add README.md  git commit -m <span class="token string">"first commit"</span>  git remote add origin git@gitee.com:Gitee仓库地址  git push -u origin master </code></pre><p> <img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/12.png" alt="Git bash"></p></li><li><p>整合代码</p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/11.png" alt="整合代码"></p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/13.png" alt="如果有改动，则整合"></p></li><li><p>上传代码到Gitee</p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/14.png" alt="使用Git Gui工具"></p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/15.png" alt="先commit，再Push"></p></li><li><p><strong>Push</strong> 是上传</p></li><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/16.png"></p></li><li><p><strong>Source Branches</strong> 是选择代码分支</p></li></ol><pre><code> 1. **Arbitrary Location:**  填写Gitee仓库的SSH地址（git@ 开头） 2. 点**Push**</code></pre><ol start="12"><li><p><img src="/2021/10/11/Qt%E5%88%A9%E7%94%A8Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/17.png" alt="代码上传成功了！"></p></li><li><p>看到上图，说明上传成功了，可以到Gitee查看刚才创建的仓库(<strong>需要刷新</strong>)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker中部署MYSQL</title>
      <link href="/2021/10/10/docker%E4%B8%AD%E9%83%A8%E7%BD%B2MYSQL/"/>
      <url>/2021/10/10/docker%E4%B8%AD%E9%83%A8%E7%BD%B2MYSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><pre><code>docker pull mysql</code></pre><h2 id="二、启动"><a href="#二、启动" class="headerlink" title="二、启动"></a>二、启动</h2><pre><code>docker run -p 3306:3306 --name 21mysql -v /project/mysql/conf:/etc/mysql/conf.d -v /project/mysql/logs:/logs -v /project/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1234567 -d mysql// -e 初始化密码// -v 数据卷</code></pre><ul><li>-p  3306:3306   因为MYSQL的默认端口是3306</li></ul><h2 id="三、进入mysql"><a href="#三、进入mysql" class="headerlink" title="三、进入mysql"></a>三、进入mysql</h2><pre><code>docker exec -it 21mysql /bin/bashmysql -uroot -p1234567输入密码</code></pre><h2 id="四、设置数据库远程连接"><a href="#四、设置数据库远程连接" class="headerlink" title="四、设置数据库远程连接"></a>四、设置数据库远程连接</h2><ol><li>新建用户</li></ol><pre class=" language-mysql"><code class="language-mysql"> #创建新的远程用户及密码 CREATE USER 'jim'@'%' IDENTIFIED BY '123456'; #设置远程登录  ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '1234567'; </code></pre><p>​    </p><ol start="2"><li><p>设置权限</p><ol><li><h4 id="所有数据库的所有权限"><a href="#所有数据库的所有权限" class="headerlink" title="所有数据库的所有权限"></a>所有数据库的所有权限</h4><pre class=" language-mysql"><code class="language-mysql">grant all privileges on *.* to 'jim'@'%';#刷新FLUSH PRIVILEGES;</code></pre></li></ol></li><li><p>设置 testDB 数据库的所有权限</p><pre class=" language-mysql"><code class="language-mysql">//@localhost 是本地连接grant all privileges on testDB.* to 'jim'@localhost identified by '1234';//@'%' 远程grant all privileges on mogudb.* to 'jim'@'%';flush privileges;//刷新系统权限表</code></pre></li><li><p>设置 testDB 数据库的部分权限</p><p> ****   赋予了 <strong>查询和更新</strong> 的权限</p><pre class=" language-mysql"><code class="language-mysql">grant select,update on testDB.* to test@localhost identified by '1234';flush privileges; //刷新系统权限表</code></pre></li><li><p>修改密码</p><pre class=" language-mysql"><code class="language-mysql">update mysql.user set password=password('新密码') where User="test" and Host="localhost";flush privileges;</code></pre></li><li><p>删除用户及权限</p><pre class=" language-mysql"><code class="language-mysql">#删除远程用户drop user 用户名@'%';#例如:drop 'jim'@'%';#删除本地用户drop user 用户名@localhost; </code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker中部署Tomcat</title>
      <link href="/2021/10/10/docker%E4%B8%AD%E9%83%A8%E7%BD%B2Tomcat/"/>
      <url>/2021/10/10/docker%E4%B8%AD%E9%83%A8%E7%BD%B2Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="tomcat相关操作"><a href="#tomcat相关操作" class="headerlink" title="tomcat相关操作"></a>tomcat相关操作</h1><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><pre><code>docker pull tomcat//指定版本号：docker pull tomcat:9.0</code></pre><h2 id="二、启动Tomcat"><a href="#二、启动Tomcat" class="headerlink" title="二、启动Tomcat"></a>二、启动Tomcat</h2><h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><pre><code>docekr run -p 8080:8080  -it --name xxxtomcat tomcat </code></pre><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3><pre><code>docker run -p 8080:8080 -it tomcat /bin/bashcd /bin./startup.sh</code></pre><h3 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h3><pre><code>docker create --name xxxtomcat -p 80:8080 -v /project/demo1://usr/local/tomcat/webapps tomcat</code></pre><ul><li>-p 80:8080  80是外部访问的端口，8080是Tomcat监事的端口，80:8080 把Tomcat的8080端口映射到服务器的80端口</li><li>-v 是添加数据卷, <strong>:</strong> 前面的的是服务器的/本地的路径(目录/文件夹)</li><li><strong>–name</strong> 后面的是自定义的名字方便区别</li></ul><h2 id="三、进入Tomcat里"><a href="#三、进入Tomcat里" class="headerlink" title="三、进入Tomcat里"></a>三、进入Tomcat里</h2><pre><code>docker exec -it xxxtomcat /bin/bash//把/project/demo1里的文件 复制到 容器里docker cp /project/demo1 xxxtomcat://usr/local/tomcat/webapps</code></pre><h2 id="默认访问的文件"><a href="#默认访问的文件" class="headerlink" title="默认访问的文件"></a>默认访问的文件</h2><p><strong>Tomcat默认打开/usr/local/tomcat/webapps/ROOT/index.html</strong></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装docker</title>
      <link href="/2021/10/10/linux%E5%AE%89%E8%A3%85docker/"/>
      <url>/2021/10/10/linux%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装DOCKER"><a href="#安装DOCKER" class="headerlink" title="安装DOCKER"></a>安装DOCKER</h1><ol><li>先安装一些系统工具</li><li>添加软件源信息：</li><li>更新并且安装Docker-ce</li><li>启动Docker</li></ol><pre><code>yum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum -y install docker-ceservice docker start</code></pre><pre><code>镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https://7n7zsvyk.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h1 id="启动docker后台"><a href="#启动docker后台" class="headerlink" title="启动docker后台"></a>启动docker后台</h1><ol><li>docker run  hello-world</li><li>docker images<ol><li>REPOSITORY</li><li>TAG   版本号</li><li>IMAGE ID   镜像ID（同一个镜像的<strong>ID相同</strong>且<strong>唯一的</strong>）</li><li>CREATED    镜像创建时间</li><li>SIZE     镜像大小</li></ol></li></ol><h2 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1.获取镜像"></a>1.获取镜像</h2><ol><li><pre><code> docker pull centos</code></pre><ol><li>这样会下载最新的CentOS版本</li></ol></li><li><pre><code> docker pull cenos:7</code></pre><ol><li>指定下载的版本号</li></ol></li></ol><h2 id="2-查看本地镜像"><a href="#2-查看本地镜像" class="headerlink" title="2.查看本地镜像"></a>2.查看本地镜像</h2><ol><li><p>查看所有的本地镜像</p><ol><li><pre><code> docker images docker images -a</code></pre></li><li><p><strong>-a    含中间映像层</strong></p></li><li><p>只查看镜像的ID</p><ol><li><pre><code> docker images -aq</code></pre></li></ol></li></ol></li><li><p>查看单个镜像的信息</p><ol><li><pre><code> docker images tomcat docker images centos</code></pre></li></ol></li><li><p>查看完整的信息</p><ol><li><pre><code> docker images --digests</code></pre></li><li><pre><code> docker images --digests --no-trunc</code></pre></li><li><p>–no-trunc   显示完整的ID信息</p></li></ol></li></ol><h2 id="3-搜索某个镜像"><a href="#3-搜索某个镜像" class="headerlink" title="3.搜索某个镜像"></a>3.搜索某个镜像</h2><ol><li><pre><code> docker search centos docker search -s 10 centos docker search --automated centos</code></pre></li></ol><h2 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h2><ol><li><ol><li><pre><code> docker rmi -f (IMAGE ID) docker rmi -f 镜像名1 镜像名2 ... /* 删除多个镜像 */</code></pre></li><li><pre><code> docker rmi -f $(docker images -aq)</code></pre></li></ol></li><li><p>强制删除镜像，而不进行提示确认 <strong>( -f,force )</strong></p><ol><li><pre><code> docker images prune -f</code></pre></li><li><p><strong>docker images prune</strong></p><ol><li><strong>-a .-all:</strong>    删除所有无用镜像，不光是临时镜像</li><li><strong>-filter,  filter:</strong>      只清理符合给定过滤器的镜像</li><li><strong>-f,dorce:</strong>      强制删除镜像，而不进行提示确认</li></ol></li></ol></li></ol><h2 id="5-创建镜像"><a href="#5-创建镜像" class="headerlink" title="5.创建镜像"></a>5.创建镜像</h2><p>略</p><h1 id="操作docker容器"><a href="#操作docker容器" class="headerlink" title="操作docker容器"></a>操作docker容器</h1><p>镜像是静态的只读文件，而容器带有运行时需要的可写文件层，同时，容器中的<strong>应用进程</strong>处于<strong>运行状态</strong></p><ol><li><p>进入Ubuntu镜像：</p><ol><li><pre><code> docker run -it ubuntu /bin/sh</code></pre></li><li><p>退出ubuntu：</p></li><li><pre><code> exit</code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/10/hello-world/"/>
      <url>/2021/10/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
